// Code generated by goyacc -l -o parser.go parser.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"

type yySymType struct {
	yys      int
	node     Node
	item     Token
	datetime *DateTime
}

const DASH = 57346
const DIV = 57347
const DOT = 57348
const DIGIT = 57349
const BLANK = 57350
const COLON = 57351
const COMMA = 57352
const PLUS = 57353
const EOF = 57354
const ERROR = 57355
const SPACE = 57356
const MONTH = 57357
const HANYEAR = 57358
const HANMONTH = 57359
const HANDAY = 57360
const WEEK = 57361
const ZONE = 57362
const AM = 57363
const PM = 57364
const T = 57365
const Z = 57366

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"DASH",
	"DIV",
	"DOT",
	"DIGIT",
	"BLANK",
	"COLON",
	"COMMA",
	"PLUS",
	"EOF",
	"ERROR",
	"SPACE",
	"MONTH",
	"HANYEAR",
	"HANMONTH",
	"HANDAY",
	"WEEK",
	"ZONE",
	"AM",
	"PM",
	"T",
	"Z",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 145

var yyAct = [...]int{
	54, 30, 16, 12, 52, 41, 56, 56, 21, 57,
	99, 129, 10, 55, 55, 128, 26, 14, 39, 82,
	64, 63, 103, 97, 15, 15, 49, 29, 27, 11,
	19, 131, 38, 125, 18, 124, 50, 121, 114, 113,
	101, 48, 100, 95, 87, 83, 75, 72, 65, 60,
	62, 61, 47, 40, 37, 28, 20, 33, 56, 79,
	90, 57, 91, 137, 73, 55, 88, 76, 89, 74,
	36, 79, 70, 42, 136, 135, 134, 132, 85, 84,
	130, 32, 126, 86, 98, 120, 96, 119, 104, 118,
	33, 115, 111, 109, 108, 107, 106, 105, 112, 102,
	94, 92, 116, 117, 53, 81, 78, 77, 71, 69,
	68, 67, 66, 59, 51, 46, 122, 123, 44, 43,
	35, 23, 22, 127, 93, 45, 24, 17, 1, 110,
	80, 58, 133, 31, 34, 13, 9, 25, 8, 7,
	6, 5, 4, 3, 2,
}

var yyPact = [...]int{
	10, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 20, 42, -15, 115, 114, 122, -3, 13, 41,
	12, 74, 83, -1000, 113, -1000, 60, 40, 11, 39,
	-19, 64, 112, 111, 121, 108, 38, 11, 22, 107,
	97, 54, 106, -1000, -1000, 11, -1000, 11, 36, 6,
	5, -1000, 34, 105, -1000, 104, 103, 102, 63, 101,
	-1000, 33, 74, 65, 32, 74, -1000, 100, 99, 62,
	98, -1000, 4, 31, 97, 76, 30, 59, 53, 94,
	118, 93, 29, 3, 28, 26, 92, 2, 90, 89,
	88, 87, 86, 85, -1000, 76, -1000, 25, 24, 84,
	74, 74, 83, -1000, -1000, -1000, 82, -1000, 80, -1000,
	-1000, 78, 23, 76, 76, 50, 21, 19, -1000, -1000,
	75, 74, -1000, -1000, -5, -9, 73, 17, -1000, -1000,
	70, 54, 69, -1000, 68, 67, 56, -1000,
}

var yyPgo = [...]int{
	0, 144, 143, 142, 141, 140, 139, 138, 137, 136,
	135, 2, 4, 134, 3, 1, 133, 131, 130, 129,
	0, 128, 127,
}

var yyR1 = [...]int{
	0, 21, 21, 21, 21, 21, 21, 22, 21, 21,
	21, 1, 2, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 14, 14, 15, 15, 15,
	20, 20, 20, 20, 20, 20, 20, 16, 16, 17,
	17, 18, 18, 19, 19, 19, 19, 19, 19, 19,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 1, 1, 0, 3, 1,
	1, 9, 11, 11, 9, 9, 12, 12, 12, 5,
	5, 4, 2, 2, 2, 2, 1, 3, 5, 7,
	5, 5, 6, 6, 5, 3, 3, 2, 1, 2,
	1, 2, 1, 1, 2, 3, 4, 5, 6, 9,
}

var yyChk = [...]int{
	-1000, -21, -1, -2, -3, -4, -5, -6, -7, -9,
	2, 19, -14, -10, 7, 14, -11, -22, 14, 10,
	14, 23, 7, 7, 4, -8, 19, 15, 14, 15,
	-15, -16, 7, 7, -13, 7, 10, 14, -14, 7,
	14, 24, 9, 7, 7, 4, 7, 14, -14, 4,
	14, 7, -12, 7, -20, 11, 4, 7, -17, 7,
	-14, -14, 14, 15, 15, 14, 7, 7, 7, 7,
	9, 7, 14, -15, 4, 14, -15, 7, 7, 9,
	-18, 7, 15, 14, -12, -11, 7, 14, 7, 9,
	7, 9, 7, 6, 7, 14, -11, 20, -20, 7,
	14, 14, 7, 20, -20, 7, 7, 7, 7, 7,
	-19, 7, -11, 14, 14, 7, -15, -15, 7, 7,
	7, 14, -11, -11, 14, 14, 7, -15, 20, 20,
	7, 14, 7, -20, 7, 7, 7, 7,
}

var yyDef = [...]int{
	0, -2, 1, 2, 3, 4, 5, 6, 7, 9,
	10, 0, 0, 0, 26, 0, 0, 0, 0, 0,
	0, 0, 24, 25, 0, 8, 0, 0, 0, 0,
	0, 0, 38, 0, 0, 0, 0, 0, 0, 26,
	0, 0, 0, 37, 21, 0, 23, 0, 0, 0,
	0, 24, 0, 0, 19, 0, 0, 0, 27, 40,
	20, 0, 0, 0, 0, 0, 22, 0, 0, 0,
	0, 39, 0, 0, 0, 0, 0, 35, 36, 0,
	28, 42, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 41, 0, 11, 0, 0, 0,
	0, 0, 0, 14, 15, 30, 0, 31, 0, 34,
	29, 43, 0, 0, 0, 0, 0, 0, 32, 33,
	44, 0, 12, 13, 0, 0, 45, 0, 16, 17,
	46, 0, 47, 18, 48, 0, 0, 49,
}

var yyTok1 = [...]int{
	1,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).Result = yyDollar[1].datetime
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).Result = yyDollar[1].datetime
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).Result = yyDollar[1].datetime
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).Result = yyDollar[1].datetime
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).Result = yyDollar[1].datetime
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).Result = yyDollar[1].datetime
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).Result = yyDollar[1].datetime
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yylex.(*Lexer).Result = yyDollar[1].datetime
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).Result = yyDollar[1].datetime
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*Lexer).unexpected("", "")
		}
	case 11:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			var m = ConvToManth(yyDollar[3].item.Val)
			var tm = yyDollar[7].node.(*Time)
			yyVAL.datetime = &DateTime{Year: int(yyDollar[9].node.(Year)), Month: int(m), Day: int(yyDollar[5].node.(Day)), Hour: tm.Hour, Minute: tm.Minute, Second: tm.Second, Millisecond: tm.Millisecond}
		}
	case 12:
		yyDollar = yyS[yypt-11 : yypt+1]
		{
			var m = ConvToManth(yyDollar[3].item.Val)
			var tm = yyDollar[7].node.(*Time)
			yyVAL.datetime = &DateTime{Year: int(yyDollar[11].node.(Year)), Month: int(m), Day: int(yyDollar[5].node.(Day)), Hour: tm.Hour, Minute: tm.Minute, Second: tm.Second, Millisecond: tm.Millisecond}
		}
	case 13:
		yyDollar = yyS[yypt-11 : yypt+1]
		{
			var m = ConvToManth(yyDollar[3].item.Val)
			var tm = yyDollar[7].node.(*Time)
			yyVAL.datetime = &DateTime{Year: int(yyDollar[11].node.(Year)), Month: int(m), Day: int(yyDollar[5].node.(Day)), Hour: tm.Hour, Minute: tm.Minute, Second: tm.Second, Millisecond: tm.Millisecond}
		}
	case 14:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			var m = ConvToManth(yyDollar[3].item.Val)
			var tm = yyDollar[7].node.(*Time)
			yyVAL.datetime = &DateTime{Year: int(yyDollar[5].node.(Year)), Month: int(m), Day: int(yyDollar[1].node.(Day)), Hour: tm.Hour, Minute: tm.Minute, Second: tm.Second, Millisecond: tm.Millisecond}
		}
	case 15:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			var m = ConvToManth(yyDollar[3].item.Val)
			var tm = yyDollar[7].node.(*Time)
			yyVAL.datetime = &DateTime{Year: int(yyDollar[5].node.(Year)), Month: int(m), Day: int(yyDollar[1].node.(Day)), Hour: tm.Hour, Minute: tm.Minute, Second: tm.Second, Millisecond: tm.Millisecond}
		}
	case 16:
		yyDollar = yyS[yypt-12 : yypt+1]
		{
			var m = ConvToManth(yyDollar[6].item.Val)
			var tm = yyDollar[10].node.(*Time)
			yyVAL.datetime = &DateTime{Year: int(yyDollar[8].node.(Year)), Month: int(m), Day: int(yyDollar[4].node.(Day)), Hour: tm.Hour, Minute: tm.Minute, Second: tm.Second, Millisecond: tm.Millisecond}
		}
	case 17:
		yyDollar = yyS[yypt-12 : yypt+1]
		{
			var m = ConvToManth(yyDollar[6].item.Val)
			var tm = yyDollar[10].node.(*Time)
			yyVAL.datetime = &DateTime{Year: int(yyDollar[8].node.(Year)), Month: int(m), Day: int(yyDollar[4].node.(Day)), Hour: tm.Hour, Minute: tm.Minute, Second: tm.Second, Millisecond: tm.Millisecond}
		}
	case 18:
		yyDollar = yyS[yypt-12 : yypt+1]
		{
			var m = ConvToManth(yyDollar[6].item.Val)
			var tm = yyDollar[10].node.(*Time)
			yyVAL.datetime = &DateTime{Year: int(yyDollar[8].node.(Year)), Month: int(m), Day: int(yyDollar[4].node.(Day)), Hour: tm.Hour, Minute: tm.Minute, Second: tm.Second, Millisecond: tm.Millisecond}
		}
	case 19:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			var dt = yyDollar[1].node.(*Date)
			var tm = yyDollar[3].node.(*Time)
			yyVAL.datetime = &DateTime{Year: dt.Year, Month: dt.Month, Day: dt.Day, Hour: tm.Hour, Minute: tm.Minute, Second: tm.Second, Millisecond: tm.Millisecond}
		}
	case 20:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &Date{Year: int(yyDollar[1].node.(Year)), Month: int(yyDollar[3].node.(Month)), Day: int(yyDollar[5].node.(Day))}
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = JoinYear(yyDollar[1].item, yyDollar[2].item, yyDollar[3].item, yyDollar[4].item)
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = JoinYear(yyDollar[1].item, yyDollar[2].item)
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = JoinMonth(yyDollar[1].item, yyDollar[2].item)
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = JoinDay(yyDollar[1].item, yyDollar[2].item)
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = JoinDay(yyDollar[2].item)
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = JoinDay(yyDollar[1].item)
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = &Time{Hour: int(yyDollar[1].node.(Hour)), Minute: int(yyDollar[3].node.(Minute))}
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &Time{Hour: int(yyDollar[1].node.(Hour)), Minute: int(yyDollar[3].node.(Minute)), Second: int(yyDollar[5].node.(Second))}
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.node = &Time{Hour: int(yyDollar[1].node.(Hour)), Minute: int(yyDollar[3].node.(Minute)), Second: int(yyDollar[5].node.(Second)), Millisecond: int(yyDollar[7].node.(Millisecond))}
		}
	case 30:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
		}
	case 31:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = JoinHour(yyDollar[1].item, yyDollar[2].item)
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = JoinHour(yyDollar[1].item)
		}
	case 39:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = JoinMinute(yyDollar[1].item, yyDollar[2].item)
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = JoinMinute(yyDollar[1].item)
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = JoinSecond(yyDollar[1].item, yyDollar[2].item)
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = JoinSecond(yyDollar[1].item)
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = JoinMillisecond(yyDollar[1].item)
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.node = JoinMillisecond(yyDollar[1].item, yyDollar[2].item)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.node = JoinMillisecond(yyDollar[1].item, yyDollar[2].item, yyDollar[3].item)
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.node = JoinMillisecond(yyDollar[1].item, yyDollar[2].item, yyDollar[3].item, yyDollar[4].item)
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = JoinMillisecond(yyDollar[1].item, yyDollar[2].item, yyDollar[3].item, yyDollar[4].item, yyDollar[5].item)
		}
	case 48:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.node = JoinMillisecond(yyDollar[1].item, yyDollar[2].item, yyDollar[3].item, yyDollar[4].item, yyDollar[5].item, yyDollar[6].item)
		}
	case 49:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.node = JoinMillisecond(yyDollar[1].item, yyDollar[2].item, yyDollar[3].item, yyDollar[4].item, yyDollar[5].item, yyDollar[6].item, yyDollar[7].item, yyDollar[8].item, yyDollar[9].item)
		}
	}
	goto yystack /* stack new state and value */
}
